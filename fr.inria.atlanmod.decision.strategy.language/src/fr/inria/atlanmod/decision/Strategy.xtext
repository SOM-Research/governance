// automatically generated by Xtext
grammar fr.inria.atlanmod.decision.Strategy with org.eclipse.xtext.common.Terminals

import "http://atlanmod.fr/strategy" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Project returns Project:
	{Project}
	'Project' name=ID '{'
	('Roles' ':' roles+=Role ( "," roles+=Role)*  )?
	('Deadlines' ':' deadlines+=Deadline ( "," deadlines+=Deadline)*  )?
	('Strategies' ':' strategies+=Strategy ( "," strategies+=Strategy)*)?
	'}' 
	;  

Strategy returns Strategy: 
	Majority | RatioMajority | LeaderDriven | PhasedStrategy;
  
Role returns Role: 
	name=ID  
	; 
 
Majority returns Majority: 
	name=ID ':' 'Majority'
	'{'
		'applied to' appliedTo=CollaborationType ('(' Filter ')')?
		'people' people+=[Role|ID] ( "," people+=[Role|ID])*  
		'range' range=RangeType
		('minVotes' minVotes=INT)?
		'deadline' deadline=[Deadline|ID]
	'}';
	 
RatioMajority returns RatioMajority: 
	name=ID ':' 'Ratio'
	'{'
		'applied to' ('Task' | 'Patch' | 'Comment') ('(' Filter ')')?
		'people' people+=[Role|ID] ( "," people+=[Role|ID])*  
		'range' range=RangeType
		('minVotes' minVotes=INT)? 
		'ratio' ratio=FLOAT
		'deadline' deadline=[Deadline|ID]
	'}';	
	
LeaderDriven returns LeaderDriven: 
	name=ID ':' 'LeaderDriven'
	'{' 
		'applied to' ('Task' | 'Patch' | 'Comment') ('(' filter=Filter ')')?
		'default' default=[Strategy|ID]
		'deadline' deadline=[Deadline|ID]
	'}';	
	 
PhasedStrategy returns PhasedStrategy: 
	name=ID ':' 'Ratio'
	'{' 
		'phases' '{' phases+=[Strategy|ID]* '}'
	'}';	
		 
Filter:
	(ID '=' ID) (',' ID '=' ID)? 
; 
	
Deadline returns Deadline:
	Timer | WaitForVote | OCLCondition;

Timer returns Timer:
	{Timer}
	name=ID ':' timeStamp=INT 'days'
	;
	
OCLCondition returns OCLCondition:
	oclExpression=STRING
;

WaitForVote returns WaitForVote:
	roles+=[Role|ID] ( "," roles+=[Role|ID])*  
;	

enum CollaborationType returns CollaborationType:
	TASK='Task' | PATCH='Patch' | COMMENT='Comment'
;	
	
enum RangeType returns RangeType:
	PRESENT = 'Present' | QUALIFIED = 'Qualified';

terminal FLOAT returns ecore::EFloat :
	(('-'|'+')? (INT '.' INT| '.' INT | INT '.') ('e' ('-'|'+') INT)?) | '1';
	



